MODELS:
from django.db import models
from pygments.lexers import get_all_lexers  
from pygments.styles import get_all_styles   
from pygments.lexers import get_lexer_by_name
from pygments.formatters.html import HtmlFormatter
from pygments import highlight


LEXERS = [item for item in get_all_lexers() if item[1]]
LANGUAGE_CHOICES = sorted([(item[1][0], item[0]) for item in LEXERS])
STYLE_CHOICES = sorted([(item, item) for item in get_all_styles()])


class Snippet(models.Model):
    created = models.DateTimeField(auto_now_add=True)
    title = models.CharField(max_length=100, blank=True, default='')
    code = models.TextField()  
    linenos = models.BooleanField(default=False) 
    language = models.CharField(choices=LANGUAGE_CHOICES, default='python', max_length=100) 
    style = models.CharField(choices=STYLE_CHOICES, default='friendly', max_length=100)
    owner = models.ForeignKey('auth.User', related_name = 'snippets', on_delete = models.CASCADE)  
    highlighted = models.TextField()   

    class Meta:
        ordering = ['created']   



    def save(self, *args, **kwargs):
   
        lexer = get_lexer_by_name(self.language)
        linenos = 'table' if self.linenos else False
        options = {'title': self.title} if self.title else {}
        formatter = HtmlFormatter(style=self.style, linenos=linenos,full=True, **options)
        self.highlighted = highlight(self.code, lexer, formatter)
        super().save(*args, **kwargs)







SERIALIZERS:

from rest_framework import serializers
from snippets.models import Snippet
from django.contrib.auth.models import User


class SnippetSerializer(serializers.HyperlinkedModelSerializer):  
    owner = serializers.ReadOnlyField(source='owner.username') 
    highlight = serializers.HyperlinkedIdentityField(view_name = 'snippet-highlight', format ='html')
    class Meta:
        model = Snippet
        fields = ['url', 'id', 'highlight', 'owner', 'title','code', 'linenos', 'language' , 'style']  
    
class UserSerializer(serializers.ModelSerializer):
    snippets = serializers.HyperlinkedRelatedField(many= True, view_name = 'snippet-detail', read_only = True)

    class Meta:
        model = User
        fields = ['url', 'id', 'username', 'snippets']



VIEWS:
from snippets.models import Snippet
from snippets.serializer import SnippetSerializer, UserSerializer
from django.contrib.auth.models import User
from rest_framework import permissions     
from rest_framework.response import Response
from snippets.permissions import IsOwnerOrReadOnly
from rest_framework import renderers
from rest_framework import viewsets
from rest_framework.decorators import action
        

class SnippetViewSet(viewsets.ModelViewSet):
queryset = Snippet.objects.all()
    serializer_class = SnippetSerializer
    permission_classes = [permissions.IsAuthenticatedOrReadOnly,IsOwnerOrReadOnly]

    @action(detail=True,renderer_classes = [renderers.StaticHTMLRenderer] )
    def highlight(self,request, *args, **kwargs):
        snippet = self.get_object()
        return Response(snippet.highlighted)
    
    def perform_create(self, serializer):  
        serializer.save(owner=self.request.user)

class UserViewSet(viewsets.ReadOnlyModelViewSet):    
    queryset = User.objects.all()
    serializer_class = UserSerializer




PERMISSIONS:
from rest_framework import permissions

class IsOwnerOrReadOnly(permissions.BasePermission):
    def has_object_permission(self, request, view, obj):
        if request.method in permissions.SAFE_METHODS:
            return True
        return obj.owner == request.user
    




SNIPPETS/URLS:

from django.urls import path
from rest_framework.urlpatterns import format_suffix_patterns
from snippets.views import  SnippetViewSet, UserViewSet
from rest_framework import renderers


snippet_list = SnippetViewSet.as_view({
    'get': 'list',
    'post': 'create'
})

snippet_detail = SnippetViewSet.as_view({
    'get': 'retrieve',
    'put': 'update',
    'patch': 'partial_update',
    'delete': 'destroy'
})

snippet_highlight = SnippetViewSet.as_view({
    'get': 'highlight'},
    renderer_classes = [renderers.StaticHTMLRenderer])

user_list = UserViewSet.as_view({
    'get':'list'
})

user_detail = UserViewSet.as_view({
    'get' : 'retrieve'
})


urlpatterns =format_suffix_patterns[ 
    path('snippets/', snippet_list ,name = 'snippet-list'),
    path('snippets/<int:pk>/' ,snippet_detail , name = 'snippet-detail'),
    path('users/', user_list, name = 'user-list'),      
    path('users/<int:pk>/', user_detail, name = 'user-detail'),
    path('snippets/<int:pk>/highlight/',snippet_highlight, name= 'snippet-highlight'),     
]





TUTORIAL/URLS:
from django.urls import path,include
from rest_framework.routers import DefaultRouter
from snippets import views

router = DefaultRouter() 
router.register(r'snippets', views.SnippetViewSet, basename='snippet')
router.register(r'users', views.UserViewSet, basename='user')

urlpatterns = [
    path('', include(router.urls)),
    path('api-auth/', include('rest_framework.urls')), 
]
